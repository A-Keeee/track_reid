# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tracking_pb2 as tracking__pb2


class TrackingServiceStub(object):
    """跟踪服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendCoordinates = channel.stream_unary(
                '/tracking.TrackingService/SendCoordinates',
                request_serializer=tracking__pb2.CoordinateData.SerializeToString,
                response_deserializer=tracking__pb2.Response.FromString,
                )
        self.GetCurrentCoordinates = channel.unary_unary(
                '/tracking.TrackingService/GetCurrentCoordinates',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.CoordinateData.FromString,
                )
        self.SubscribeCoordinates = channel.unary_stream(
                '/tracking.TrackingService/SubscribeCoordinates',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.CoordinateData.FromString,
                )
        self.SetFollowCommand = channel.unary_unary(
                '/tracking.TrackingService/SetFollowCommand',
                request_serializer=tracking__pb2.FollowCommand.SerializeToString,
                response_deserializer=tracking__pb2.Response.FromString,
                )
        self.GetTrackingStatus = channel.unary_unary(
                '/tracking.TrackingService/GetTrackingStatus',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.TrackingStatus.FromString,
                )
        self.SetAutoTracking = channel.unary_unary(
                '/tracking.TrackingService/SetAutoTracking',
                request_serializer=tracking__pb2.AutoTrackingConfig.SerializeToString,
                response_deserializer=tracking__pb2.Response.FromString,
                )
        self.ToggleAutoTracking = channel.unary_unary(
                '/tracking.TrackingService/ToggleAutoTracking',
                request_serializer=tracking__pb2.Empty.SerializeToString,
                response_deserializer=tracking__pb2.Response.FromString,
                )
        self.IsActived = channel.unary_unary(
                '/tracking.TrackingService/IsActived',
                request_serializer=tracking__pb2.IsActivedRequest.SerializeToString,
                response_deserializer=tracking__pb2.IsActivedResponse.FromString,
                )
        self.Active = channel.unary_unary(
                '/tracking.TrackingService/Active',
                request_serializer=tracking__pb2.ActiveRequest.SerializeToString,
                response_deserializer=tracking__pb2.ActiveResponse.FromString,
                )


class TrackingServiceServicer(object):
    """跟踪服务定义
    """

    def SendCoordinates(self, request_iterator, context):
        """发送坐标数据 (客户端流)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentCoordinates(self, request, context):
        """获取当前坐标 (单次请求)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCoordinates(self, request, context):
        """订阅坐标更新 (服务端流)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFollowCommand(self, request, context):
        """接收跟随指令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrackingStatus(self, request, context):
        """获取跟踪状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAutoTracking(self, request, context):
        """设置自动跟踪配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToggleAutoTracking(self, request, context):
        """切换自动跟踪模式
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsActived(self, request, context):
        """获取是否在跟随状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Active(self, request, context):
        """打开或关闭跟随
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendCoordinates': grpc.stream_unary_rpc_method_handler(
                    servicer.SendCoordinates,
                    request_deserializer=tracking__pb2.CoordinateData.FromString,
                    response_serializer=tracking__pb2.Response.SerializeToString,
            ),
            'GetCurrentCoordinates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentCoordinates,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.CoordinateData.SerializeToString,
            ),
            'SubscribeCoordinates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCoordinates,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.CoordinateData.SerializeToString,
            ),
            'SetFollowCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFollowCommand,
                    request_deserializer=tracking__pb2.FollowCommand.FromString,
                    response_serializer=tracking__pb2.Response.SerializeToString,
            ),
            'GetTrackingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrackingStatus,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.TrackingStatus.SerializeToString,
            ),
            'SetAutoTracking': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAutoTracking,
                    request_deserializer=tracking__pb2.AutoTrackingConfig.FromString,
                    response_serializer=tracking__pb2.Response.SerializeToString,
            ),
            'ToggleAutoTracking': grpc.unary_unary_rpc_method_handler(
                    servicer.ToggleAutoTracking,
                    request_deserializer=tracking__pb2.Empty.FromString,
                    response_serializer=tracking__pb2.Response.SerializeToString,
            ),
            'IsActived': grpc.unary_unary_rpc_method_handler(
                    servicer.IsActived,
                    request_deserializer=tracking__pb2.IsActivedRequest.FromString,
                    response_serializer=tracking__pb2.IsActivedResponse.SerializeToString,
            ),
            'Active': grpc.unary_unary_rpc_method_handler(
                    servicer.Active,
                    request_deserializer=tracking__pb2.ActiveRequest.FromString,
                    response_serializer=tracking__pb2.ActiveResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tracking.TrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrackingService(object):
    """跟踪服务定义
    """

    @staticmethod
    def SendCoordinates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/tracking.TrackingService/SendCoordinates',
            tracking__pb2.CoordinateData.SerializeToString,
            tracking__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrentCoordinates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/GetCurrentCoordinates',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.CoordinateData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeCoordinates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tracking.TrackingService/SubscribeCoordinates',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.CoordinateData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetFollowCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/SetFollowCommand',
            tracking__pb2.FollowCommand.SerializeToString,
            tracking__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTrackingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/GetTrackingStatus',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.TrackingStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAutoTracking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/SetAutoTracking',
            tracking__pb2.AutoTrackingConfig.SerializeToString,
            tracking__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ToggleAutoTracking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/ToggleAutoTracking',
            tracking__pb2.Empty.SerializeToString,
            tracking__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsActived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/IsActived',
            tracking__pb2.IsActivedRequest.SerializeToString,
            tracking__pb2.IsActivedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Active(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracking.TrackingService/Active',
            tracking__pb2.ActiveRequest.SerializeToString,
            tracking__pb2.ActiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
